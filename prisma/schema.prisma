datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = "native"
}

/// Facultades de la universidad.
model Faculty {
  /// Identificador de la facultad en la base de datos.
  id      Int      @id @default(autoincrement())
  /// Nombre de la facultad.
  name    String   @unique
  /// Determina si la facultad se encuentra disponible aún.
  state   Boolean  @default(true)
  /// Lista de escuelas pertenecientes a la facultad.
  schools School[]
}

/// Escuelas de la universidad.
model School {
  /// Identificador de una escuela en la base de datos.
  id          Int                @id @default(autoincrement())
  /// Nombre de la escuela.
  name        String             @unique
  /// Determina si la escuela aún está disponible aún.
  state       Boolean            @default(true)
  /// Identificador de la facultad a la que pertenece la escuela.
  facultyId   Int
  /// Factulad a la que pertenece la escuela.
  faculty     Faculty            @relation(fields: [facultyId], references: [id])
  /// Usuarios pertenecientes a la escuela.
  users       User[]
  /// Planes de estudios con los que cuenta la escuela.
  curriculums SchoolCurriculum[]
}

model Semester {
  name        String       @id
  startDate   DateTime?
  finishDate  DateTime?
  current     Boolean      @default(false)
  users       User[]
  groups      Group[]
  enrollments Enrollment[]
}

model User {
  id          Int          @id @default(autoincrement())
  nickname    String       @unique
  password    String
  name        String
  lastname    String
  birthDate   DateTime
  state       Boolean      @default(true)
  semesterId  String
  schoolId    Int
  semesterIn  Semester     @relation(fields: [semesterId], references: [name])
  school      School       @relation(fields: [schoolId], references: [id])
  enrollments Enrollment[]
}

model Curriculum {
  id      Int                @id @default(autoincrement())
  name    String             @unique
  state   Boolean            @default(true)
  schools SchoolCurriculum[]
}

model SchoolCurriculum {
  schoolId     Int
  curriculumId Int
  school       School     @relation(fields: [schoolId], references: [id])
  curriculum   Curriculum @relation(fields: [curriculumId], references: [id])
  courses      Course[]

  @@id([schoolId, curriculumId])
}

model Course {
  code                String           @id
  name                String
  credits             Int
  academicPhase       Int
  state               Boolean          @default(true)
  schoolId            Int
  curriculumId        Int
  schoolCurriculum    SchoolCurriculum @relation(fields: [schoolId, curriculumId], references: [schoolId, curriculumId])
  groups              Group[]
  coursePrerequisites Course[]         @relation("CoursesPrerequisites", references: [code])
  prerequisitesOf     Course[]         @relation("CoursesPrerequisites", references: [code])
}

model Teacher {
  id       Int     @id @default(autoincrement())
  name     String
  lastname String
  groups   Group[]
}

model Group {
  id                Int                @id @default(autoincrement())
  denomination      String
  state             Boolean            @default(true)
  courseCode        String
  teacherId         Int
  semesterId        String
  course            Course             @relation(fields: [courseCode], references: [code])
  teacher           Teacher            @relation(fields: [teacherId], references: [id])
  semester          Semester           @relation(fields: [semesterId], references: [name])
  enrollmentDetails EnrollmentDetail[]
  activities        Activity[]
  schedules         Schedule[]

  @@unique([denomination, courseCode, teacherId, semesterId])
}

model Enrollment {
  id                Int                @id @default(autoincrement())
  weightedAverage   Int?
  state             Boolean            @default(true)
  userId            Int
  semesterId        String
  user              User               @relation(fields: [userId], references: [id])
  semester          Semester           @relation(fields: [semesterId], references: [name])
  enrollmentDetails EnrollmentDetail[]

  @@unique([userId, semesterId])
}

model EnrollmentDetail {
  id           Int        @id @default(autoincrement())
  averageGrade Float?
  state        Boolean    @default(true)
  enrollmentId Int
  groupId      Int
  enrollment   Enrollment @relation(fields: [enrollmentId], references: [id])
  group        Group      @relation(fields: [groupId], references: [id])
  grades       Grade[]

  @@unique([enrollmentId, groupId])
}

model TypeActivity {
  id         Int        @id @default(autoincrement())
  name       String
  activities Activity[]
}

model Activity {
  id               Int          @id @default(autoincrement())
  name             String
  weight           Float
  presentationDate DateTime?
  state            Boolean      @default(true)
  typeActivityId   Int
  activityId       Int?
  groupId          Int
  typeActivity     TypeActivity @relation(fields: [typeActivityId], references: [id])
  parentActivity   Activity?    @relation("ActivityToActivity", fields: [activityId], references: [id])
  group            Group        @relation(fields: [groupId], references: [id])
  childActivities  Activity[]   @relation("ActivityToActivity")
  grades           Grade[]
}

model Grade {
  activityId         Int
  enrollmentDetailId Int
  calification       Float?
  confirmated        Boolean          @default(false)
  state              Boolean          @default(true)
  activity           Activity         @relation(fields: [activityId], references: [id])
  enrollmentDetail   EnrollmentDetail @relation(fields: [enrollmentDetailId], references: [id])

  @@id([activityId, enrollmentDetailId])
}

model Schedule {
  id         Int      @id @default(autoincrement())
  day        Int
  startHour  DateTime
  finishHour DateTime
  state      Boolean  @default(true)
  groupId    Int
  group      Group    @relation(fields: [groupId], references: [id])
}
