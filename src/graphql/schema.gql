# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type Activity {
  activities: [Activity!]!
  activity: Activity
  activityId: Int
  childActivities: [Activity!]!
  grades: [Grade!]!
  group: Group!
  groupId: Int!
  id: ID!
  name: String!
  parentActivity: Activity
  presentationDate: DateTime
  state: Boolean!
  typeActivity: TypeActivity!
  typeActivityId: Int!
  weight: Float!
}

input ActivityInput {
  activityId: Int
  groupId: Int
  name: String
  presentationDate: DateTime
  state: Boolean
  typeActivityId: Int
  weight: Float
}

type AuthenticationPayload {
  token: String!
  user: User!
}

type Course {
  academicPhase: Int!
  code: ID!
  coursePrerequisites: [Course!]!
  credits: Int!
  groups: [Group!]!
  name: String!
  prerequisitesOf: [Course!]!
  school: School!
  schoolId: Int!
  state: Boolean!
}

input CourseInput {
  academicPhase: Int
  code: String
  credits: Int
  name: String
  prerequisites: [String!]
  schoolId: Int
  state: Boolean
}

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

type Enrollment {
  enrollmentDetails: [EnrollmentDetail!]!
  id: ID!
  semester: Semester!
  semesterId: String!
  state: Boolean!
  user: User!
  userId: Int!
  weightedAverage: Int
}

type EnrollmentDetail {
  averageGrade: Float
  enrollment: Enrollment!
  enrollmentId: Int!
  grades: [Grade!]!
  group: Group!
  groupId: Int!
  id: ID!
  state: Boolean!
}

input EnrollmentDetailInput {
  averageGrade: Int
  enrollmentId: Int
  groupId: Int
  state: Boolean
}

input EnrollmentInput {
  semesterId: String
  state: Boolean
  userId: Int
  weightedAverage: Int
}

type Faculty {
  id: ID!
  name: String!
  schools: [School!]!
  state: Boolean!
}

input FacultyInput {
  name: String
  state: Boolean
}

type Grade {
  activity: Activity!
  activityId: Int!
  calification: Float
  confirmated: Boolean!
  enrollmentDetail: EnrollmentDetail!
  enrollmentDetailId: Int!
  id: ID!
  state: Boolean!
}

input GradeInput {
  activityId: Int
  calification: Float
  confirmated: Boolean
  enrollmentDetailId: Int
  state: Boolean
}

type Group {
  activities: [Activity!]!
  course: Course!
  courseCode: String!
  denomination: String!
  enrollmentDetails: [EnrollmentDetail!]!
  id: ID!
  schedules: [Schedule!]!
  semester: Semester!
  semesterId: String!
  state: Boolean!
  teacher: Teacher!
  teacherId: Int!
}

input GroupInput {
  courseCode: String
  denomination: String
  semesterId: String
  state: Boolean
  teacherId: Int
}

type Mutation {
  addActivity(data: ActivityInput!): Activity!
  addCourse(data: CourseInput!): Course!
  addEnrollment(data: EnrollmentInput!): Enrollment!
  addEnrollmentDetail(data: EnrollmentDetailInput!): EnrollmentDetail!
  addFaculty(data: FacultyInput!): Faculty!
  addGrade(data: GradeInput!): Grade!
  addGroup(data: GroupInput!): Group!
  addSchedule(data: ScheduleInput!): Schedule!
  addSchool(data: SchoolInput!): School!
  addSemester(data: SemesterInput!): Semester!
  addTeacher(data: TeacherInput!): Teacher!
  addTypeActivity(data: TypeActivityInput!): TypeActivity!
  deleteActivity(id: Int!): Activity!
  deleteCourse(code: String!): Course!
  deleteEnrollment(id: Int!): Enrollment!
  deleteEnrollmentDetail(id: Int!): EnrollmentDetail!
  deleteFaculty(id: Int!): Faculty!
  deleteGrade(id: Int!): Grade!
  deleteGroup(id: Int!): Group!
  deleteSchedule(id: Int!): Schedule!
  deleteSchool(id: Int!): School!
  deleteSemester(name: String!): Semester!
  deleteTeacher(id: Int!): Teacher!
  deleteTypeActivity(id: Int!): TypeActivity!
  deleteUser(id: Int!): User!
  modifyActivity(data: ActivityInput!, id: Int!): Activity!
  modifyCourse(code: String!, data: CourseInput!): Course!
  modifyEnrollment(data: EnrollmentInput!, id: Int!): Enrollment!
  modifyEnrollmentDetail(data: EnrollmentDetailInput!, id: Int!): EnrollmentDetail!
  modifyFaculty(data: FacultyInput!, id: Int!): Faculty!
  modifyGrade(data: GradeInput!, id: Int!): Grade!
  modifyGroup(data: GroupInput!, id: Int!): Group!
  modifySchedule(data: ScheduleInput!, id: Int!): Schedule!
  modifySchool(data: SchoolInput!, id: Int!): School!
  modifySemester(data: SemesterInput!, name: String!): Semester!
  modifyTeacher(data: TeacherInput!, id: Int!): Teacher!
  modifyTypeActivity(data: TypeActivityInput!, id: Int!): TypeActivity!
  modifyUser(data: UserInput!, id: Int): User!
  signup(data: UserInput!): AuthenticationPayload!
}

type Query {
  activities: [Activity!]!
  activity(id: Int!): Activity!
  course(code: String): Course!
  courses(academicPhase: Float, name: String, school: Float): [Course!]!
  enrollment(id: Int!): Enrollment!
  enrollmentDetail(id: Int!): EnrollmentDetail!
  enrollmentDetails: [EnrollmentDetail!]!
  enrollments: [Enrollment!]!
  faculties: [Faculty!]!
  faculty(id: Int, name: String): Faculty!
  grade(id: Int!): Grade!
  grades: [Grade!]!
  group(id: Int!): Group!
  groups: [Group!]!
  login(nickname: String!, password: String!): AuthenticationPayload!
  schedule(id: Int!): Schedule!
  schedules: [Schedule!]!
  school(id: Int, name: String): School!
  schools(facultyId: Int): [School!]!
  semester(name: String!): Semester!
  semesters: [Semester!]!
  teacher(id: Int!): Teacher!
  teachers(names: String!): [Teacher!]!
  typeActivity(id: Int!): TypeActivity!
  typesActivity: [TypeActivity!]!
  user(id: Int): User!
  users: [User!]!
}

type Schedule {
  day: Int!
  finishHour: DateTime!
  group: Group!
  groupId: Int!
  id: ID!
  startHour: DateTime!
  state: Boolean!
}

input ScheduleInput {
  day: Int
  finishHour: DateTime
  groupId: Int
  startHour: DateTime
  state: Boolean
}

type School {
  courses: [Course!]!
  faculty: Faculty!
  facultyId: Int!
  id: ID!
  name: String!
  state: Boolean!
  users: [User!]!
}

input SchoolInput {
  facultyId: Int
  name: String
  state: Boolean
}

type Semester {
  enrollments: [Enrollment!]!
  finishDate: DateTime!
  groups: [Group!]!
  name: ID!
  startDate: DateTime!
  state: Boolean!
  users: [User!]!
}

input SemesterInput {
  finishDate: DateTime
  name: String
  startDate: DateTime
  state: Boolean
}

type Teacher {
  groups: [Group!]!
  id: ID!
  lastname: String!
  name: String!
  state: Boolean!
}

input TeacherInput {
  lastname: String
  name: String
  state: Boolean
}

type TypeActivity {
  activities: [Activity!]!
  id: ID!
  name: String!
}

input TypeActivityInput {
  name: String!
}

type User {
  birthDate: DateTime!
  email: String!
  enrollments: [Enrollment!]!
  genre: Boolean!
  id: ID!
  lastname: String!
  name: String!
  nickname: String!
  password: String!
  photo: String!
  school: School!
  schoolId: Int!
  semester: Semester!
  semesterId: String!
  state: Boolean!
}

input UserInput {
  birthDate: DateTime
  email: String
  genre: Boolean
  lastname: String
  name: String
  nickname: String
  password: String
  photo: String
  schoolId: Int
  semesterId: String
  state: Boolean
}
